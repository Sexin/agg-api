<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0;" name="viewport" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>聊天室</title>
    <style>
        html {
            padding: 0;
            margin: 0;
            width: 100%;
            height: 100%;
        }

        body {
            padding: 0;
            margin: 0;
            width: 100%;
            height: calc(100% - 65px);
        }

        header {
            width: 100%;
            height: 65px;
            line-height: 65px;
            background: #4FAEE6;
            color: #fff;
            font-size: 20px;
            padding-left: 50px;
            position: fixed;
            top: 0;
        }

        .input-box {
            width: 100%;
            position: fixed;
            bottom: 0;
            height: 40px;
            line-height: 40px;
            border-top: 1px solid #f0f0f0;
            text-align: center;
            display: flex;
            justify-content: center;
            padding: 20px 0;
        }

        .usernickname-box,
        .roomname-box {
            width: 100%;
            height: 100%;
            background: rgba(240, 240, 240, 0.5);
            z-index: 1;
            position: fixed;
            top: 0;
            display: none;
        }

        .usernickname-input-box,
        .roomname-input-box {
            width: 250px;
            height: 50px;
            margin: 200px auto;
            border: 1px solid #000;
            border-radius: 20px;
            padding: 20px;
        }

        .content-box {
            max-width: 500px;
            height: calc(100% - 80px);
            overflow: auto;
            margin: 65px auto 0;
            border-left: 1px solid #f0f0f0;
            border-right: 1px solid #f0f0f0;
        }
    </style>
</head>

<body>
    <header>
        聊天室
    </header>
    <div class='content-box'>

    </div>
    <div class='input-box'>
        <!-- <input type="textarea" id='text'> -->
        <textarea rows='2' cols='40' id='text' style='resize: none;'></textarea>
        <button onclick='user.sendMsg()'>发送</button>
    </div>
    <div class='usernickname-box'>
        <div class='usernickname-input-box'>
            <input type="text" id='usernickname' placeholder="请输入昵称">
            <button onclick="user.setUserNickName()">确认</button>
        </div>
    </div>
    <div class='roomname-box'>
        <div class='roomname-input-box'>
            <input type="text" id='roomname' placeholder="请输入房间名称">
            <button onclick="user.joinroom()">确认</button>
        </div>
    </div>
</body>
<script src="https://cdn.bootcss.com/socket.io/2.1.0/socket.io.js"></script>
<script src="https://cdn.bootcdn.net/ajax/libs/axios/0.1.0/axios.min.js"></script>
<script>
    console.log(axios)

    // axios.defaults.baseURL = 'https://47.100.200.195/api/';
    if (localStorage.getItem('token')) {
        axios.defaults.headers.common['token'] = localStorage.getItem('token');
    }

    const log = console.log;
    let user;
    let socket;

    class Axiosc {
        init() {
            const token = localStorage.getItem('token');
            if (token) {
                this.setToken(token);
            }
        }

        setToken(token) {
            axios.defaults.headers.common['token'] = token;
        }
    }

    class User {
        login() {
            axios.post('/api/login').then(json => {
                if (json.status === 0) {
                    localStorage.setItem('token', json.data.token);
                    axiosc.setToken(json.data.token);
                }
            })
        }

        getUserNickName() {
            const usernickname = localStorage.getItem('usernickname');
            if (!usernickname) {
                document.querySelector('.usernickname-box').style.display = 'block';
                return;
            }
            this.usernickname = usernickname;
            this.login();
            document.querySelector('.roomname-box').style.display = 'block';
        }

        setUserNickName() {
            const name = document.querySelector('#usernickname').value;
            localStorage.setItem('usernickname', name)
            this.usernickname = name;
            this.login();
            document.querySelector('.usernickname-box').style.display = 'none';
            document.querySelector('.roomname-box').style.display = 'block';
        }

        connect() {
            socket.init();
        }

        createroom() {
            const roomname = document.querySelector('#roomname').value;
            axios.post('/api/nsp/createroom', {
                roomname: roomname,
                usernickname: this.usernickname
            }).then(json => {
                console.log(json);
            })
        }

        joinroom() {
            const roomname = document.querySelector('#roomname').value;
            axios.post('/api/nsp/joinroom', {
                roomname: roomname
            }).then(json => {
                if (json.status === 0) {
                    this.roomname = roomname
                    socket = new SockerIO(this.usernickname, roomname);
                    user.connect();
                    document.querySelector('.roomname-box').style.display = 'none';
                    window.onkeydown = (event) => {
                        const e = event || window.event;
                        if (e && e.keyCode == 13) {
                            e.preventDefault();
                            user.sendMsg();
                        }
                    }
                } else {
                    alert(json.message)
                }
            })
        }

        sendMsg() {
            socket.socket.emit('exchange', {
                target: this.roomname,
                payload: {
                    msg: document.querySelector('#text').value
                },
                usernickname: this.usernickname
            });
            document.querySelector('#text').value = ''
        }
    }

    class SockerIO {
        constructor(usernickname, roomname) {
            this.usernickname = usernickname
            this.roomname = roomname
        }

        init() {
            const socket = io('/', {

                // 实际使用中可以在这里传递参数
                query: {
                    room: this.roomname,
                    userId: `client_${Math.random()}`,
                    userNickName: this.usernickname
                },

                transports: ['websocket']
            });

            socket.on('connect', () => {
                const id = socket.id;

                log('#connect,', id, socket);

                // 监听自身 id 以实现 p2p 通讯
                socket.on(id, msg => {
                    log('#receive,', msg);
                });
            });

            // 接收在线用户信息
            socket.on('online', msg => {
                log('#online,', msg);
            });

            // 系统事件
            socket.on('disconnect', msg => {
                log('#disconnect', msg);
            });

            socket.on('disconnecting', () => {
                log('#disconnecting');
            });

            socket.on('error', () => {
                log('#error');
            });

            socket.on(this.roomname, msg => {
                log(msg)
                const str = `
                    <span class='usernickname'>${msg.meta.usernickname}: <span>
                    <span>${msg.data.payload.msg}</span>
                `;
                const dom = document.createElement('div');
                dom.innerHTML = str;
                dom.style.minheight = '40px';
                dom.style.margin = '10px 0';
                if (msg.meta.usernickname == localStorage.getItem('usernickname')) {
                    dom.style.textAlign = 'right';
                    dom.style.color = 'red';
                    dom.style.paddingLeft = '100px';
                    dom.style.paddingRight = '10px';
                } else {
                    dom.style.paddingLeft = '10px';
                    dom.style.paddingRight = '100px';
                }
                document.querySelector('.content-box').appendChild(dom);
                const contetn_dom = document.querySelector('.content-box');
                if (contetn_dom.clientHeight < contetn_dom.scrollHeight) {
                    contetn_dom.scrollTo({
                        top: contetn_dom.scrollTop + 50,
                        behavior: 'smooth'
                    })
                }
            })

            this.socket = socket;
        }
    }

    window.onload = function () {
        user = new User();
        axiosc = new Axiosc();
        axiosc.init();
        user.getUserNickName();
        document.documentElement.addEventListener('touchstart', function (event) {
            if (event.touches.length > 1) {
                event.preventDefault();
            }
        }, false);
        var lastTouchEnd = 0;
        document.documentElement.addEventListener('touchend', function (event) {
            var now = Date.now();
            if (now - lastTouchEnd <= 300) {
                event.preventDefault();
            }
            lastTouchEnd = now;
        }, false);
    }
</script>

</html>